{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kruno\\\\ReactJS\\\\React Udemy Course\\\\Section20-MultiPage-SPA-Router\\\\12-adv-starting-project\\\\frontend\\\\src\\\\pages\\\\NewEventPage.js\";\nimport { json } from \"react-router-dom\";\nimport EventForm from \"../components/EventForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEventPage = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 10\n  }, this);\n};\n_c = NewEventPage;\nexport default NewEventPage;\nexport const action = async _ref => {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData(); // params uzimamo kada imamo već podatke (a tu nemamo pošto tek stvaramo novi objekt)\n  // a request nam je zahtjev koji šaljemo našoj bazi da spremi novi objekt u bazu\n  const eventData = {\n    title: data.get(\"title\"),\n    image: data.get(\"image\"),\n    date: data.get(\"date\"),\n    description: data.get(\"description\")\n  };\n  console.log(\"tu sam\");\n  console.log(eventData);\n  /*   const response = await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  }); */\n  const response = await fetch(\"http://localhost:8080/events\", {\n    method: \"POST\",\n    body: JSON.stringify(eventData),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  console.log(\"tu sam\");\n  if (!response.ok) {\n    throw json({\n      message: \"Could not save event.\"\n    }, {\n      status: 500\n    });\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"NewEventPage\");","map":{"version":3,"names":["json","EventForm","NewEventPage","action","request","params","data","formData","eventData","title","get","image","date","description","console","log","response","fetch","method","body","JSON","stringify","headers","ok","message","status"],"sources":["C:/Users/Kruno/ReactJS/React Udemy Course/Section20-MultiPage-SPA-Router/12-adv-starting-project/frontend/src/pages/NewEventPage.js"],"sourcesContent":["import { json } from \"react-router-dom\";\r\nimport EventForm from \"../components/EventForm\";\r\n\r\nconst NewEventPage = () => {\r\n  return <EventForm />;\r\n};\r\n\r\nexport default NewEventPage;\r\n\r\nexport const action = async ({ request, params }) => {\r\n  const data = await request.formData(); // params uzimamo kada imamo već podatke (a tu nemamo pošto tek stvaramo novi objekt)\r\n  // a request nam je zahtjev koji šaljemo našoj bazi da spremi novi objekt u bazu\r\n  const eventData = {\r\n    title: data.get(\"title\"),\r\n    image: data.get(\"image\"),\r\n    date: data.get(\"date\"),\r\n    description: data.get(\"description\"),\r\n  };\r\n  console.log(\"tu sam\");\r\n  console.log(eventData);\r\n  /*   const response = await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(eventData),\r\n  }); */\r\n  const response = await fetch(\"http://localhost:8080/events\", {\r\n    method: \"POST\",\r\n\r\n    body: JSON.stringify(eventData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  console.log(\"tu sam\");\r\n  if (!response.ok) {\r\n    throw json({ message: \"Could not save event.\" }, { status: 500 });\r\n  }\r\n};\r\n"],"mappings":";AAAA,SAASA,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,MAAMC,YAAY,GAAG,MAAM;EACzB,oBAAO,QAAC,SAAS;IAAA;IAAA;IAAA;EAAA,QAAG;AACtB,CAAC;AAAC,KAFIA,YAAY;AAIlB,eAAeA,YAAY;AAE3B,OAAO,MAAMC,MAAM,GAAG,cAA+B;EAAA,IAAxB;IAAEC,OAAO;IAAEC;EAAO,CAAC;EAC9C,MAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,EAAE,CAAC,CAAC;EACvC;EACA,MAAMC,SAAS,GAAG;IAChBC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACrC,CAAC;EACDI,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrBD,OAAO,CAACC,GAAG,CAACP,SAAS,CAAC;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IAC3DC,MAAM,EAAE,MAAM;IAEdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,SAAS,CAAC;IAC/Bc,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACFR,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;EACrB,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAMvB,IAAI,CAAC;MAAEwB,OAAO,EAAE;IAAwB,CAAC,EAAE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACnE;AACF,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}