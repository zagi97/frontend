{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kruno\\\\ReactJS\\\\React Udemy Course\\\\Section20-MultiPage-SPA-Router\\\\12-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/EventsPage\";\nimport EventDetailPage, { loader as eventDetailLoader } from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport RootLayout from \"./pages/RootLayout\";\nimport EventsRoot from \"./pages/EventsRoot\";\nimport Error from \"./pages/ErrorPage\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 19\n  }, this),\n  children: [{\n    index: true,\n    //path: \"\"\n    /*  path: \"/\", */\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 18\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventsRoot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }, this),\n    children: [{\n      index: true,\n      //path: \"\"\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 22\n      }, this),\n      loader: eventsLoader\n    }, {\n      path: \":eventID\",\n      element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 22\n      }, this),\n      loader: eventDetailLoader\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 22\n      }, this)\n    }, {\n      path: \":eventID/edit\",\n      element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 22\n      }, this)\n    }]\n  }]\n}]);\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 10\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventsPage","loader","eventsLoader","EventDetailPage","eventDetailLoader","NewEventPage","EditEventPage","RootLayout","EventsRoot","Error","router","path","element","errorElement","children","index","App"],"sources":["C:/Users/Kruno/ReactJS/React Udemy Course/Section20-MultiPage-SPA-Router/12-adv-starting-project/frontend/src/App.js"],"sourcesContent":["import { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventsPage, { loader as eventsLoader } from \"./pages/EventsPage\";\nimport EventDetailPage, {\n  loader as eventDetailLoader,\n} from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport RootLayout from \"./pages/RootLayout\";\nimport EventsRoot from \"./pages/EventsRoot\";\nimport Error from \"./pages/ErrorPage\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <RootLayout />,\n    errorElement: <Error />,\n    children: [\n      {\n        index: true, //path: \"\"\n        /*  path: \"/\", */\n        element: <HomePage />,\n      },\n      {\n        path: \"events\",\n        element: <EventsRoot />,\n        children: [\n          {\n            index: true, //path: \"\"\n            element: <EventsPage />,\n            loader: eventsLoader,\n          },\n          {\n            path: \":eventID\",\n            element: <EventDetailPage />,\n            loader: eventDetailLoader,\n          },\n          {\n            path: \"new\",\n            element: <NewEventPage />,\n          },\n          {\n            path: \":eventID/edit\",\n            element: <EditEventPage />,\n          },\n        ],\n      },\n    ],\n  },\n]);\n\nconst App = () => {\n  return <RouterProvider router={router} />;\n};\n\nexport default App;\n"],"mappings":";AAAA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,IAAIC,MAAM,IAAIC,YAAY,QAAQ,oBAAoB;AACvE,OAAOC,eAAe,IACpBF,MAAM,IAAIG,iBAAiB,QACtB,yBAAyB;AAChC,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,KAAK,MAAM,mBAAmB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA,MAAMC,MAAM,GAAGb,mBAAmB,CAAC,CACjC;EACEc,IAAI,EAAE,GAAG;EACTC,OAAO,eAAE,QAAC,UAAU;IAAA;IAAA;IAAA;EAAA,QAAG;EACvBC,YAAY,eAAE,QAAC,KAAK;IAAA;IAAA;IAAA;EAAA,QAAG;EACvBC,QAAQ,EAAE,CACR;IACEC,KAAK,EAAE,IAAI;IAAE;IACb;IACAH,OAAO,eAAE,QAAC,QAAQ;MAAA;MAAA;MAAA;IAAA;EACpB,CAAC,EACD;IACED,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAE,QAAC,UAAU;MAAA;MAAA;MAAA;IAAA,QAAG;IACvBE,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MAAE;MACbH,OAAO,eAAE,QAAC,UAAU;QAAA;QAAA;QAAA;MAAA,QAAG;MACvBX,MAAM,EAAEC;IACV,CAAC,EACD;MACES,IAAI,EAAE,UAAU;MAChBC,OAAO,eAAE,QAAC,eAAe;QAAA;QAAA;QAAA;MAAA,QAAG;MAC5BX,MAAM,EAAEG;IACV,CAAC,EACD;MACEO,IAAI,EAAE,KAAK;MACXC,OAAO,eAAE,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA;IACxB,CAAC,EACD;MACED,IAAI,EAAE,eAAe;MACrBC,OAAO,eAAE,QAAC,aAAa;QAAA;QAAA;QAAA;MAAA;IACzB,CAAC;EAEL,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,MAAMI,GAAG,GAAG,MAAM;EAChB,oBAAO,QAAC,cAAc;IAAC,MAAM,EAAEN;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG;AAC3C,CAAC;AAAC,KAFIM,GAAG;AAIT,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}